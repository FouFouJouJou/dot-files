#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
* Editor
#+begin_src emacs-lisp
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (set-frame-font "Iosevka Term 15" nil t)
  ;;(set-frame-font "Fira Code Medium" nil t)
  (global-font-lock-mode 1)
  (blink-cursor-mode 1)
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-screen t)
#+end_src
* Buffers
#+begin_src emacs-lisp
  (setq display-buffer-alist '(
  			     ("\\*Occur\\*"
  			      (display-buffer-reuse-mode-window)
  			      (window-height . fit-window-to-buffer)
  			      (window-parameters . ((mode-line-format . none)))
  			      )
  			     ("\\*Async Shell Command\\*"
  			      (display-buffer-no-window))
  			     ("compilation"
  			      (display-buffer-reuse-mode-window)
  			      (body-function . delete-other-windows))
  			     ("magit"
  			      (display-buffer-reuse-mode-window)
  			      (body-function . delete-other-windows))
  			     ("\\*Help\\*"
  			      (display-buffer-reuse-window)
  			      (body-function . select-window))
  			     ("\\*tide-documentation\\*"
  			      (display-buffer-reuse-window)
  			      (body-function . select-window))))
#+end_src
* Hooks
#+begin_src emacs-lisp
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
#+end_src
* Backup and custom files
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t
        version-control t
        delete-old-versions t
        kept-new-versions 20
        kept-old-versions 5)

  (setq custom-file "~/.emacs.d/custom.el")
#+end_src
* Key maps
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-buffer-and-window)
  (global-set-key (kbd "C-x C-x") 'kill-buffer)
  (global-set-key (kbd "C-x C-k") 'nil)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
* Dired
#+begin_src emacs-lisp
  (setf dired-kill-when-opening-new-dired-buffer t)
  (put 'dired-find-alternate-file 'disabled nil)
  (add-hook 'dired-mode 'evil-collection-init)
#+end_src
* Use-package
#+begin_src emacs-lisp
  (setq package-selected-packages '(use-package))
  (setq package-archives '(("elpa" . "https://tromey.com/elpa/")
  			 ("melpa" . "https://melpa.org/packages/")
  			 ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
* Themes
#+begin_src emacs-lisp
  (use-package almost-mono-themes
    :config
    ;;(load-theme 'almost-mono-black t)
    ;;(load-theme 'almost-mono-gray t)
    ;;(load-theme 'almost-mono-cream t)
    (load-theme 'almost-mono-white t))
#+end_src
* Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :config
    (ligature-set-ligatures 't '("www"))
    (ligature-set-ligatures 't '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
  			       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
  			       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
  			       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
  			       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
  			       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
  			       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
  			       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
  			       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
  			       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
  			       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
  			       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
  			       "\\\\" "://"))
    (global-ligature-mode t))
#+end_src
* Evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-insert-state-cursor '("red" box)
  	evil-normal-state-cursor '("red" box)
  	evil-want-integration t
  	evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)

    :init
    ;;(define-key evil-motion-state-map "gd" 'dumb-jump-go)
    (evil-define-key 'normal dired-mode-map "h" 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map "l" 'dired-find-alternate-file)
    (evil-define-key 'normal dired-mode-map "q" 'kill-current-buffer)
    (evil-define-key 'normal dired-mode-map "(" 'dired-hide-details-mode)
    (evil-define-key 'normal dired-mode-map "u" 'dired-unmark)
    (evil-define-key 'normal dired-mode-map "gg" 'revert-buffer)
    (evil-define-key 'normal dired-mode-map "f" 'dired-create-empty-file)
    (evil-define-key 'visual dired-mode-map "u" 'dired-unmark)
    (evil-define-key 'visual dired-mode-map "s" 'dired-do-relsymlink)
    ;; org
    (evil-define-key 'normal org-mode-map (kbd "M-k") 'org-metaup)
    (evil-define-key 'normal org-mode-map (kbd "M-l") 'org-metaright)
    (evil-define-key 'normal org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key 'normal org-mode-map (kbd "M-h") 'org-metaleft)

    :config
    (evil-set-initial-state 'shell-mode 'motion)
    (evil-set-initial-state 'verb-mode 'motion)
    (evil-set-initial-state 'verb-response-body-mode 'motion)
    (evil-set-initial-state 'verb-response-headers-mode 'motion)
    (evil-collection-init t))

  (use-package key-chord
    :init
    (setq key-chord-two-keys-default 0.1)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
    :config
    (key-chord-mode 1))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :after evil-collection
    :config
    (evil-define-key 'normal magit-status-mode-map "gg" 'magit-refresh))
#+end_src
* Ido
[[https://emacs.stackexchange.com/questions/73089/project-find-file-completion-and-navigation][source link]]
#+begin_src emacs-lisp
  (use-package ido
    :init
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (setq ido-max-window-height 1)
    :config
    (ido-mode 1))

  (use-package ido-completing-read+
    :after ido
    :config 
    (ido-ubiquitous-mode 1))

  (use-package ido-yes-or-no
    :config
    (ido-yes-or-no-mode 1))
#+end_src
* Smex
#+begin_src emacs-lisp
  (use-package smex
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+end_src
* Org mode
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-confirm-babel-evaluate nil)
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.4))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.3))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.2))))
     '(org-level-6 ((t (:inherit outline-5 :height 1.1))))
     '(org-level-7 ((t (:inherit outline-5 :height 1.0)))))
    :mode ("\\.org\\'" . org-mode)
    :hook (org-mode . evil-collection-init)
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t))))

  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
* Ediff
#+begin_src emacs-lisp
  (use-package ediff
    :ensure nil
    :commands (ediff-buffers ediff-files ediff-buffers3 ediff-files3)
    :init
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    :config
    (setq ediff-keep-variants nil)
    (setq ediff-make-buffers-readonly-at-startup nil)
    (setq ediff-merge-revisions-with-ancestor t)
    (setq ediff-show-clashes-only t))

#+end_src
* Typescript
#+begin_src emacs-lisp
  (setq typescript-indent-level 2)
  (setq typescript-auto-indent-flag t)
  (use-package typescript-mode
    :mode (("\\.ts" . typescript-mode)))
#+end_src
* Tide
#+begin_src emacs-lisp
  (use-package tide
    :ensure t
    :hook
    (;;(typescript-mode . tide-setup)
     (tide-mode . (lambda () (eldoc-mode -1))))
    :bind (("C-c d" . tide-documentation-at-point)))
#+end_src
* Company
#+begin_src emacs-lisp
  (use-package company)
#+end_src
* Tide
#+begin_src emacs-lisp
  (use-package tide
    :init (setq eldoc-echo-area-use-multiline-p nil)
    :after (typescript-mode company)
    :hook ((typescript-mode . tide-setup)
  	 (tide-mode . (lambda () (eldoc-mode -1)))))
#+end_src
* Eros
#+begin_src emacs-lisp
  (use-package eros
    :config
    (eros-mode 1))
#+end_src
* Verb
#+begin_src emacs-lisp
  (use-package verb
    :config
    (setq verb-enabled-log 'nil
  	verb-auto-kill-response-buffers t)
    :bind
    (:map verb-mode-map
  	("C-c C-c" . verb-send-request-on-point)
  	("C-c C-<return>" . verb-send-request-on-point-no-window))
    (:map verb-response-body-mode-map
  	("C-x C-k" . verb-kill-all-response-buffers)
  	("C-c C-h" . verb-toggle-show-headers))
    (:map verb-response-headers-mode-map
  	("C-x C-k" . verb-kill-all-response-buffers))
    :hook (verb-mode . evil-collection-init))
#+end_src
